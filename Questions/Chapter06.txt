1) Many companies pay time-and-a-half for any hours worked above 40 in a given week. Write a program to input the number of hours worked and the hourly rate and calculate the total wages for the week.

2) Error

3) certain CS professor gives 100-point exams that are graded on the scale
90-100:A, 80-89:B, 70-79:C, 60-69:D, <60:F. Write a program that ac-
corresponding grade.
cepts an exam score as input and uses a decision structure to calculate the

4) with less than 7 credits is a Freshman. At least 7 credits are required to be a Sophomore, 16 to be a Junior and 26 to be classified as a Senior. Write a program that calculates class standing from the number of credits earned.

5) The body mass index (BMI) is calculated as a person's weight (in pounds) times 703, divided by the square of the person's height (in inches). A BMI in the range 19-25, inclusive, is considered healthy. Write a program that calculates a person's BMI and prints a message telling whether they are above, within, or below the healthy range.

6) The speeding ticket fine policy in Podunksville is $50 plus $5 for each mph over the limit plus a penalty of $200 for any speed over 90 mph. Write a program that accepts a speed limit and a clocked speed and either prints a message indicating the speed was legal or prints the amount of the fine, if the speed is illegal.

7) A babysitter charges $12.50 an hour until 9:00 PM when the rate drops to $11.50 an hour (the children are in bed). Write a program that accepts a starting time and ending time in hours and minutes and calculates the total babysitting bill. You may assume that the starting and ending times are in a single 24-hour period. Partial hours should be appropriately prorated.

8) A person is eligible to be a US senator if they are at least 30 years old and have been a US citizen for at least 9 years. To be a US representative these numbers are 25 and 7, respectively. Write a program that accepts a person's age and years of citizenship as input and outputs their eligibility for the Senate and House.

9) A formula for computing Easter in the years 1982-2048, inclusive, is as
follows: let a = year%19, b = year%4, c = year%T, d = (19a + 24) 630,
e = (2b + 4c + 6d + 5)%7. The date of Easter is March 22 + d + e (whichthe proper range, and then prints out the date of Easter that year. could be in April). Write a program that inputs a year, verifies that it is in

10) The formula for Easter in the previous problem works for every year in the range 1900-2099 except for 1954, 1981, 2049, and 2076. For these four years it produces a date that is one week too

11) ﻿﻿﻿A year is a leap year if it is divisible by 4, unless it is a century year that is not divisible by 400. (1800 and 1900 are not leap years while 1600 and 2000 are.) Write a program that calculates whether a year is a leap year.

12) Write a program that allows the user to enter the day, month and year numbers for a date, and then outputs whether or not the date is valid. For example 5/24/1962 is valid, but 9/31/2000 is not. (September has only

13) The days of the year are often numbered from 1 through 365 (or 366).
This number can be computed in three steps using int arithmetic:
﻿﻿﻿﻿dayNum = 31 (month - 1) + day
﻿﻿﻿﻿if the month is after February subtract (4(month) + 23)//10
﻿﻿﻿﻿if it's a leap year and after February 29, add 1
Write a program that accepts a date as month/day/year, verifies that it is a valid date (see previous problem), and then calculates the corresponding day number.

14) Do Programming Exercise 7 from Chapter 4, but add a decision to handle the case where the line does not intersect the circle.

15) Do Programming Exercise 8 from Chapter 4, but add a decision to prevent the program from dividing by zero if the line is vertical.

16) ﻿﻿﻿Archery Scorer. Write a program that draws an archery target (see Programming Exercise 2 from Chapter 4) and allows the user to click five times to represent arrows shot at the target. Using five-band scoring, a bulls-eye (yellow) is worth 9 points and each successive ring is worth 2 fewer points down to 1 for white. The program should output a score for each click and keep track of a running sum for the entire series.

17) Write a program to animate a circle bouncing around a window. The basic idea is to start the circle somewhere in the interior of the window. Use variables de and dy (both initialized to 1) to control the movement of the circle. Use a large counted loop (say 10,000 iterations), and each time through the loop move the circle using de and dy. When the x-value of the center of the circle gets too high (it hits the edge), change dx to -1. When it gets too low, change dx back to 1. Use a similar approach for dy.
Note: Your animation will probably run too fast. You can slow it down by using update from the graphics library with a rate parameter. For ex-ample, this loop will be limited to going around at a rate of 30 times per second:
for - in range (10000) :
update (30) # pause so rate is not more than 30 times a second

18) Take a favorite programming problem from a previous chapter and add decisions and/or exception handling as required to make it truly robust (will not crash on any inputs). Trade your program with a friend and have a contest to see who can "break" the other's program.
