1)Write a program that uses a while loop to determine how long it takes for an investment to double at a given interest rate. The input will be an annualized interest rate, and the output is the number of years it takes an investment to double. Note: The amount of the initial investment does not matter; you can use $1.

2) The Syracuse (also called "Collatz" or "Hailstone") sequence is generated by starting with a natural number and repeatedly applying the following function until reaching 1:
syr (x) =
x/2
if x is even
3x +1 if x is odd
of each of the follow-tion of "input" values. is is helpful.
For example, the Syracuse sequence starting with 5 is: 5, 16, 8, 4,2, 1. It is an open question in mathematics whether this sequence will always go to 1 for every possible starting value.
Write a program that gets a starting value from the user and then prints
the Syracuse sequence for that starting value.

3) positive whole number n > 2 is prime if no number between 2 and n (inclusive) evenly divides n. Write a program that accepts a value of n as input and determines if the value is prime. If n is not prime, your program should quit as soon as it finds a value that evenly divides n.

4) Modify the previous program to find every prime number less than or equal
to n.

5) The Goldbach conjecture asserts that every even number is the sum of two prime numbers. Write a program that gets a number from the user, checks to make sure that it is even, and then finds two prime numbers that add
up to the number.
6. The greatest common divisor

6) The greatest common divisor (GCD) of two values can be computed using Euclid's algorithm. Starting with the values m and n, we repeatedly apply
the formula: n, m = m, n/m until m is 0. At that point, n is the GCD of
the original m and n. Write a program that finds the GCD of two numbers using this algorithm.

7) Write a program that computes the fuel efficiency of a multi-leg journey.
The program will first prompt for the starting odometer reading and then get information about a series of legs. For each leg, the user enters the current odometer reading and the amount of gas used. The user signals the end of the trip with a blank line. The program should print out the miles per gallon achieved on each leg and the total MPG for the trip.

8) Heating and cooling degree days are measures used by utility companies to estimate energy requirements. If the average temperature for a day is below 60, then the number of degrees below 60 is added to the heating degree days. If the temperature is above 80, the amount over 80 is added to the cooling degree days. Write a program that accepts a sequence of average daily temperatures and computes the running total of cooling and heating degree days. The program should print these two totals after all the data has been processed.

9) Write a program that graphically plots a regression line-that is, the line with the best fit through a collection of points. First ask the user to specify the data points by clicking on them in a graphics window. To find the end of input, place a small rectangle labeled "Done" in the lower-left corner of the window; the program will stop gathering points when the user clicks inside that rectangle.
The regression line is the line with the following equation:
where
m =
Lxyi - пху
1і- по2
is the mean of the x-values, y is the mean of the y-values, and n is the
233
As the user clicks on points, the program should draw them in the graphics window and keep track of the count of input values and the running sum of x, y, x", and xy values. When the user clicks inside the "Done" rectangle, the program then computes the value of y (using the equations above corresponding to the x values at the left and right edges of the window to compute the endpoints of the regression line spanning the win-dow. After the line is drawn, the program will pause for another mouse dick before closing the window and quitting.

10) Write a program that converts a color image to grayscale. The user supplies the name of a file containing a GIF or PM image, and the program loads the image and displays the file. At the click of the mouse, the program converts the image to grayscale. The user is then prompted for a file name to store the grayscale image in.
You will probably want to go back and review the Image object from the graphics library (Section 4.7.4). The basic idea for converting the image is to go through it pixel by pixel and convert each one from color to an appropriate shade of gray. A gray pixel is created by setting its red, green, and blue components to have the same brightness. So color rgb (0,0,0) is black, color rgb (255,255,255) is white, and color rgb (127,127,127) is a gray "halfway" between. You should use a weighted average of the original RGB values to determine the brightness of the gray. Here is the pseudocode for the grayscale algorithm:
for each row in the image:
for each column in the image:
I, g, b = get pixel information for current row and column
brightness = int (round (0.299r + 0.587g + 0.114b))
set pixel to color_rgb(brightness, brightness, brightness)
update the image # to see progress row by row
Note: The pixel operations in the Image class are rather slow, so you will want to use relatively small images (not 12 megapixels) to test your program.

11) Write a program to convert an image to its color negative. The general form of the program will be similar to that of the previous problem. The negative of a pixel is formed by subtracting each color value from 255. So the new pixel color is color rgb (255-r, 255-g, 255-b).

12) Modify the event_l00p3 program to use the <Esc> key as described in the text. When the user types into an Entry box, hitting < Esc > should cause the Entry to disappear and discard whatever text may have been typed in the box.

13) Modify the circle bouncing program (Exercise 17 from Chapter 6) so that it keeps running until the user presses the a key. While you are at it, add keyboard interactions that allow the user to change the color and speed of the circle.
